/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package registrationandlogin;

import javax.swing.JOptionPane;


/**
 *
 * @author RC_Student_lab
 */
public class ChatArea extends javax.swing.JFrame {
    // Stores the ID of the current user using this chat area
    private String userId;
     // Maximum number of messages allowed in this chat area
    private int messagelimit;
    // Counter to track how many messages have been sent so far
    private int sentCount = 0;
     // Stores the recipient's or user's cell phone number
    private String cellNumber;
    // Instance of CheckMessage class to perform message validation or checking
    CheckMessage checker = new CheckMessage();
    
     /**
     * Creates new form ChatArea
     */
    public ChatArea(String userId, int messagelimit, String cellNumber) {
    // Initialize the GUI components
        initComponents();  
    // Set the maximum allowed messages for this chat
        this.messagelimit = messagelimit;  
    // Store the user ID for this chat session
        this.userId = userId;               
    // Store the recipient or userâ€™s cell phone number
        this.cellNumber = cellNumber;       

    // Set the window title to show user ID and message limit info
    setTitle("Chat for ID: " + userId + " Limit: " + messagelimit);
}

     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();
        txtMessage = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Numeric Menu");
        setMinimumSize(new java.awt.Dimension(800, 500));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 100));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("QuickChat");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(591, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 800, 100);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        btnSend.setBackground(new java.awt.Color(0, 0, 51));
        btnSend.setForeground(new java.awt.Color(255, 255, 255));
        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        txtChat.setColumns(20);
        txtChat.setRows(5);
        jScrollPane1.setViewportView(txtChat);

        jButton2.setBackground(new java.awt.Color(0, 0, 51));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Quit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Want to exit?");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Connect with people");

        jButton3.setBackground(new java.awt.Color(0, 0, 51));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                    .addComponent(txtMessage))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSend)
                    .addComponent(jButton2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 100, 800, 400);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
      //First, it checks if the message limit has been reached before sending any message.
    if (sentCount < messagelimit) {
        //it gets the message input for the user if the message limit is not reached.
        String message = txtMessage.getText().trim();
          //It checks if the message input is empty.
        if (message.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a message.");
            return;//returns if the input is empty.
        }
          //It procceds and checks if the message doesn't contain 250+ characters.
        if (message.length() > 250) {
            JOptionPane.showMessageDialog(this, "Message cannot exceed 250 characters.");
            return;//returns if the message characters exceeds 250.
        }
        //Second,the options below will display only if all the above requirements are met.
        String[] options = {"Send", "Disregard", "Store"};
        int choice = -1;

        // The while loop is used to keep on display the options until the the user chooses the correct option.
        while (choice < 0 || choice > 2) {
            choice = JOptionPane.showOptionDialog(this, "Do you want to send, disregard, or store this message?","Message Action",JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                null,options, options[0]);
        }
        // User chose to send a message
        if (choice == 0) { 
    // Split the message into words using whitespace as delimiter
    String[] words = message.split("\\s+");
    // Get the first word in uppercase
    String firstWord = words[0].toUpperCase();
    // Get the last word in uppercase
    String lastWord = words[words.length - 1].toUpperCase();
    // Get the first two characters of the userId
    String idPart = userId.substring(0, 2);
    // Create a unique hash combining idPart, message count, first and last words
    String hash = "(" + idPart + ":" + (sentCount + 1) + firstWord + lastWord + ")";
    // Append the formatted message with the hash to the chat display area
    txtChat.append("[" + userId + "] " + message + " " + hash + "\n\n");
    
    sentCount++;            // Increment the count of sent messages
    txtMessage.setText(""); // Clear the input text field for next message

    // Check if the message limit has been reached
    if (sentCount >= messagelimit) {
        // Disable message input and send button to prevent further sending
        txtMessage.setEnabled(false);
        btnSend.setEnabled(false);
         // Inform the user that the message limit is reached
        JOptionPane.showMessageDialog(this, "Message limit reached.");
    }
     // Generate a message hash using the checker object with userId, sentCount, and message content
     hash = checker.createMessageHash(userId, sentCount, message);
        // Show a confirmation dialog with message details including the generated hash
        JOptionPane.showMessageDialog(this,
           "Message sent!\n" +
           "ID: " + userId + "\n" +
           "Recipient: " + cellNumber + "\n" +
           message + "\n" +
           "Hash: " + hash);
       
     // Create a summary string containing message details
     String summary = "ID: " + userId + ", Message: " + message + ", Hash: " + hash + ", Recipient: " + cellNumber;
     // Store the message summary using the checker
     checker.storeMessage(summary);
     // Store the individual message details (userId, recipient, message) for other uses
     CheckMessage.store(userId, cellNumber, message);
     // Retrieve a string containing all messages sent so far
     String allMessages = checker.printMethods();
         JOptionPane.showMessageDialog(this, "All messages sent:\n\n " + allMessages);

    // Get the total count of messages sent so far
    int messageCount = checker.returnTotalMessage();
        // Display the total number of messages sent
        JOptionPane.showMessageDialog(this, "Total messages: " + messageCount);
       
        // If user chooses to disregard the message
        }else if (choice == 1) {
           // Clear the message input field
            String msg = txtMessage.getText().trim();
            CheckMessage.disregardMsg(msg);
            txtMessage.setText(""); 
           // Notify the user
           JOptionPane.showMessageDialog(this, "Message disregarded."); 

        // User chose to store message
        } else if (choice == 2){ 
      
        // Create a hash for the message
        String[] words = message.split("\\s+"); // Split the message into words using spaces
        String firstWord = words[0].toUpperCase(); // Get the first word in uppercase
        String lastWord = words[words.length - 1].toUpperCase(); // Get the last word in uppercase
        String idPart = userId.substring(0, 2); // Extract the first 2 characters of the user ID
        // Build the hash
        String hash = "(" + idPart + ":" + (sentCount + 1) + firstWord + lastWord + ")"; 

        // Create a message object with userId, message content, and generated hash
        message msg = new message(userId, message, hash);

       // When saving to JSON
        MessageStorage.saveMessage(msg);// store it in array
        MessageStorage.saveToJson("messages.json"); // write array to JSON

           // Show confirmation and message
           JOptionPane.showMessageDialog(this,
           "Message stored:\n\nID: " + userId + "\nRecipient: " + cellNumber +
           "\nMessage: " + message + "\nHash: " + hash);
    
          txtMessage.setText("");


           // Notify the user that the message has been stored
           JOptionPane.showMessageDialog(this, "Message stored in file.");
           // Clear the input text field after sending
           txtMessage.setText("");
        } else {
           // If message limit has been reached, inform the user
           JOptionPane.showMessageDialog(this, "You cannot send more messages.");
        }
      }    
    }//GEN-LAST:event_btnSendActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JOptionPane.showMessageDialog(this,"Goodbye");
        // Stops the program from if user decides to exit
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JOptionPane.showMessageDialog(this,"Returning to Option Menu.");
        // return to Options screen
        Options options = new Options(); 
        options.setVisible(true);       
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtChat;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables
}
